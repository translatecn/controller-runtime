/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package over_event

import "sigs.k8s.io/controller-runtime/pkg/over_client"

// CreateEvent is an over_event where a Kubernetes object was created.  CreateEvent should be generated
// by a over_source.Source and transformed into a over_reconcile.Request by an over_handler.EventHandler.
type CreateEvent struct {
	// Object is the object from the over_event
	Object over_client.Object
}

// UpdateEvent is an over_event where a Kubernetes object was updated.  UpdateEvent should be generated
// by a over_source.Source and transformed into a over_reconcile.Request by an over_handler.EventHandler.
type UpdateEvent struct {
	// ObjectOld is the object from the over_event
	ObjectOld over_client.Object

	// ObjectNew is the object from the over_event
	ObjectNew over_client.Object
}

// DeleteEvent is an over_event where a Kubernetes object was deleted.  DeleteEvent should be generated
// by a over_source.Source and transformed into a over_reconcile.Request by an over_handler.EventHandler.
type DeleteEvent struct {
	// Object is the object from the over_event
	Object over_client.Object

	// DeleteStateUnknown is true if the Delete over_event was missed but we identified the object
	// as having been deleted.
	DeleteStateUnknown bool
}

// GenericEvent is an over_event where the operation type is unknown (e.g. polling or over_event originating outside the over_cluster).
// GenericEvent should be generated by a over_source.Source and transformed into a over_reconcile.Request by an
// over_handler.EventHandler.
type GenericEvent struct {
	// Object is the object from the over_event
	Object over_client.Object
}
